# -*- coding: utf-8 -*-
"""Medium Dataset (Validation).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q2QBEbjOPm7PwAS09W-Ie2GlJ5ImySer
"""

from timeit import default_timer as timer
import numpy as np
import matplotlib
from matplotlib import pyplot as plt
import pandas as pd
import seaborn as sns
from sklearn import datasets, linear_model, metrics
from sklearn.model_selection import train_test_split, cross_val_predict, cross_val_score

# import california housing data from sklearn and store data into a variable
calihouses = datasets.fetch_california_housing()
calidata = calihouses.data
# set viz style for later
sns.set_style('dark')

calihouses.target.shape

# define the columns names of the data then convert to dataframe
headers = calihouses.feature_names
df = pd.DataFrame(calidata, columns=headers)
df.shape

# store target data to a variable

y = calihouses.target
y

# create testing and training sets for hold-out verification using scikit learn method
X_train, X_test, y_train, y_test = train_test_split(df, y, test_size = 0.25)

# validate set shapes
print(X_train.shape, y_train.shape)
print(X_test.shape, y_test.shape)

# time function using .time methods for later comparison
start_ho = timer()
# fit a model using linear model method from sklearn
lm = linear_model.LinearRegression()
model = lm.fit(X_train, y_train)

# generate predictions
predictions = lm.predict(X_test)

end_ho = timer()

# calcualte function runtime
time_ho = (end_ho - start_ho)

# plot the model
plot = sns.scatterplot(y_test, predictions)
plot.set(xlabel='Given', ylabel='Prediction')

# generate and graph y = x line
x_plot = np.linspace(0,5,100)
y_plot = x_plot
plt.plot(x_plot, y_plot, color='r')

start_ho_score = timer()
# model score (mean_squared_error)
ho_score = -1*metrics.mean_squared_error(y_test, predictions)
print(ho_score)
end_ho_score = timer()

ho_score_time = (end_ho_score - start_ho_score)

"""**KFold Cross Validation**"""

# store data as an array, create kfold object and check splits
X = np.array(df)

start_kfold = timer()
# use cross_val_predict to generate K-Fold predictions
lm_k = linear_model.LinearRegression()
k_predictions = cross_val_predict(lm_k, X, y, cv=10)
print(k_predictions)
end_kfold = timer()

kfold_time = (end_kfold - start_kfold)

# plot k-fold predictions against actual
plot_k = sns.scatterplot(y, k_predictions)
plot_k.set(xlabel='Given', ylabel='Prediction')

# generate and graph y = x line
x_plot = np.linspace(0,5,100)
y_plot = x_plot
plt.plot(x_plot, y_plot, color='r')

kfold_score_start = timer() 
# find the mean score from the k-fold models usinf cross_val_score
kfold_scores = cross_val_score(lm_k, X, y, cv=10, scoring='neg_mean_squared_error')
print(kfold_scores.mean())
kfold_score_end = timer()

kfold_score_time = (kfold_score_end - kfold_score_start)

# plot scores
sns.distplot(kfold_scores, bins=5)

cross_val_score(lm_k, X, y, cv=10, scoring='neg_mean_squared_error').mean()

import sklearn.metrics
sorted(sklearn.metrics.SCORERS.keys())

"""**LOOCV**"""

start_LOO = timer()
# generate LOO predictions
LOO_predictions = cross_val_predict(lm_k, X, y, cv=(len(X)))
end_LOO = timer()

LOO_time = (end_LOO - start_LOO)

# plot LOO predictions against actual
plot_LOO = sns.scatterplot(y, LOO_predictions)
plot_LOO.set(xlabel='Given', ylabel='Prediction')

# generate and graph y = x line
x_plot = np.linspace(0,5,100)
y_plot = x_plot
plt.plot(x_plot, y_plot, color='r')

LOO_score_start = timer()
# find the mean score from the LOO models using cross_val_score 
LOO_score = cross_val_score(lm_k, X, y, cv=(len(X)), scoring='neg_mean_squared_error').mean()
print(LOO_score)
LOO_score_end = timer()

LOO_score_time = (LOO_score_end - LOO_score_start)

print("Hold out method took", time_ho, "seconds to generate a model and", ho_score_time ,"seconds to generate a MSE of", ho_score)
print("K-Fold method took", kfold_time, 'seconds to generate a model and', kfold_score_time, 'seconds to generate a MSE of', kfold_scores.mean())
print("Leave One Out Cross Validation method took", LOO_time, 'seconds to generate a model and', LOO_score_time, 'seconds to generate a MSE of', LOO_score)

from google.colab import files
uploaded = files.upload()

import io
df2 = pd.read_csv(io.BytesIO(uploaded['Book1.csv']))

df2

graph = sns.catplot(x="model", y="value", hue="time or score", data=df2, kind="bar", palette="muted", log=True)
graph

